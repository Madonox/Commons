[{"title":"Observer","type":0,"sectionRef":"#","url":"/Commons/api/Observer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Observer","url":"/Commons/api/Observer#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Observer","url":"/Commons/api/Observer#new","content":"&lt;/&gt; Observer.new() → {[any]:any}-- Returns a table with observational capabilities. This function allows you to create a new observational table. note The returned data type is actually a userdata. In order to performantly emit table read / write events, we need to use this setup.  "},{"title":"cleanup​","type":1,"pageTitle":"Observer","url":"/Commons/api/Observer#cleanup","content":"&lt;/&gt; Observer.cleanup( proxy: {[any]:any}-- The observational table you want to clean up. ) → () This function cleans up an observational table. "},{"title":"BufferInscriber","type":0,"sectionRef":"#","url":"/Commons/api/BufferInscriber","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#functions","content":" "},{"title":"new​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#new","content":"&lt;/&gt; BufferInscriber.new( instance: buffer?-- The buffer to initialize the class with. ) → BufferInscriber-- Returns an instance of the BufferInscriber class. Create an instance of the BufferInscriber class.  "},{"title":"IncrementPointer​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#IncrementPointer","content":"&lt;/&gt; BufferInscriber:IncrementPointer( amount: number-- How much to increment the pointer by. ) → BufferInscriber This function is used to increment the pointer.  "},{"title":"IncrementPointer​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#IncrementPointer","content":"&lt;/&gt; BufferInscriber:IncrementPointer( amount: number-- What to set the pointer to. ) → BufferInscriber This function is used to set the pointer.  "},{"title":"Write​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#Write","content":"&lt;/&gt; BufferInscriber:Write( memorySize: number,-- The amount of memory (bytes) being written. dataType: string,-- The data type being inscribed. value: number-- The value being inscribed. ) → BufferInscriber This function is utilized internally. It is used to write a specific data type into a buffer, and increment the pointer accordingly.  "},{"title":"Read​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#Read","content":"&lt;/&gt; BufferInscriber:Read( memorySize: number,-- The amount of memory being read. dataType: string-- The data type being read. ) → any This function is utilized internally. It is used to read a specific data type from the buffer, and increment the pointer accordingly.  "},{"title":"ReadType​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#ReadType","content":"&lt;/&gt; BufferInscriber:ReadType( dataType: string,-- What DataType to read. offset: number?-- A starting pointer. If none is supplied, it will use the current pointer. ) → any This function is used to read a specific data type from the buffer.  "},{"title":"WriteType​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#WriteType","content":"&lt;/&gt; BufferInscriber:WriteType( dataType: string,-- What DataType to write. data: any-- The data to write into the buffer. ) → BufferInscriber This function is used to write a specific data type into the buffer.  "},{"title":"SetBuffer​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#SetBuffer","content":"&lt;/&gt; BufferInscriber:SetBuffer( buffer: buffer-- The buffer being imported. ) → BufferInscriber This function imports an external buffer, and begins using it.  "},{"title":"Destroy​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#Destroy","content":"&lt;/&gt; BufferInscriber:Destroy() → nil This function cleans up the BufferInscriber instance. "},{"title":"Pool","type":0,"sectionRef":"#","url":"/Commons/api/Pool","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Pool","url":"/Commons/api/Pool#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Pool","url":"/Commons/api/Pool#new","content":"&lt;/&gt; Pool.new( options: PoolOptions-- The initial configuration for the class. ) → Pool "},{"title":"Types","type":1,"pageTitle":"Pool","url":"/Commons/api/Pool##","content":""},{"title":"​","type":1,"pageTitle":"Pool","url":"/Commons/api/Pool#PoolOptions","content":"interface PoolOptions { Interval: number?-- The interval to run operations at (default 0.01). OperationLimit: number?-- The number of operations to run each step (default 5). }  This function creates a new instance of the Pool class.  "},{"title":"Spawn​","type":1,"pageTitle":"Pool","url":"/Commons/api/Pool#Spawn","content":"&lt;/&gt; Pool:Spawn() → Pool This function spawns a thread to process operations. There can only be one thread running at once.  "},{"title":"Stop​","type":1,"pageTitle":"Pool","url":"/Commons/api/Pool#Stop","content":"&lt;/&gt; Pool:Stop() → Pool This function stops the current thread.  "},{"title":"ThreadActive​","type":1,"pageTitle":"Pool","url":"/Commons/api/Pool#ThreadActive","content":"&lt;/&gt; Pool:ThreadActive() → boolean This function returns true if the Pool currently has a working thread.  "},{"title":"GetCurrentId​","type":1,"pageTitle":"Pool","url":"/Commons/api/Pool#GetCurrentId","content":"&lt;/&gt; Pool:GetCurrentId() → string? This function returns the current thread id if there is a working thread.  "},{"title":"QueueOperation​","type":1,"pageTitle":"Pool","url":"/Commons/api/Pool#QueueOperation","content":"&lt;/&gt; Pool:QueueOperation(operation: ( number?, Pool? ) → nil) → Pool This function queues a function to be executed by the pool.  "},{"title":"AdjustInterval​","type":1,"pageTitle":"Pool","url":"/Commons/api/Pool#AdjustInterval","content":"&lt;/&gt; Pool:AdjustInterval(interval: number) → Pool This function adjusts the interval at which the pool executes operations at.  "},{"title":"AdjustOperationLimit​","type":1,"pageTitle":"Pool","url":"/Commons/api/Pool#AdjustOperationLimit","content":"&lt;/&gt; Pool:AdjustOperationLimit(limit: number) → Pool This function adjusts the operation limit for each frame.  "},{"title":"Destroy​","type":1,"pageTitle":"Pool","url":"/Commons/api/Pool#Destroy","content":"&lt;/&gt; Pool:Destroy() → () This function destroys the Pool instance. "},{"title":"Buffer","type":0,"sectionRef":"#","url":"/Commons/api/Buffer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#new","content":"&lt;/&gt; Buffer.new( options: BufferOptions-- Configuration options for class initialization ) → Buffer-- Returns an instance of the Buffer class. Create an instance of the Buffer class.  "},{"title":"Serialize​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#Serialize","content":"&lt;/&gt; Buffer:Serialize( data: {any}-- The data you want to serialize. ) → buffer This function takes an array of data and serializes it according to the supplied template.  "},{"title":"Deserialize​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#Deserialize","content":"&lt;/&gt; Buffer:Deserialize() → {any} This function outputs a deserialized table corresponding to the contents of the current buffer.  "},{"title":"Write​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#Write","content":"&lt;/&gt; Buffer:Write( memorySize: number,-- The amount of memory (bytes) being written. dataType: string,-- The data type being inscribed. value: number-- The value being inscribed. ) → Buffer This function is utilized internally. It is used to write a specific data type into a buffer, and increment the pointer accordingly.  "},{"title":"Read​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#Read","content":"&lt;/&gt; Buffer:Read( memorySize: number,-- The amount of memory being read. dataType: string-- The data type being read. ) → any This function is utilized internally. It is used to read a specific data type from the buffer, and increment the pointer accordingly.  "},{"title":"IncrementPointer​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#IncrementPointer","content":"&lt;/&gt; Buffer:IncrementPointer( amount: number-- How much to increment the pointer by. ) → Buffer This function is used internally. It is used to increment the pointer.  "},{"title":"SetTemplate​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#SetTemplate","content":"&lt;/&gt; Buffer:SetTemplate( template: {string}-- The new template. ) → Buffer This function allows you to specify the serialization / deserialization template.  "},{"title":"MakeNewBuffer​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#MakeNewBuffer","content":"&lt;/&gt; Buffer:MakeNewBuffer() → Buffer This function creates a new buffer with size relative to the current template.  "},{"title":"ImportBuffer​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#ImportBuffer","content":"&lt;/&gt; Buffer:ImportBuffer( buffer: buffer-- The buffer being imported. ) → Buffer This function imports an external buffer, and begins using it.  "},{"title":"Destroy​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#Destroy","content":"&lt;/&gt; Buffer:Destroy() → nil This function cleans up the Buffer instance. "}]