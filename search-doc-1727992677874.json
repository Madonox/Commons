[{"title":"Buffer","type":0,"sectionRef":"#","url":"/Commons/api/Buffer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#new","content":"&lt;/&gt; Buffer.new( options: BufferOptions-- Configuration options for class initialization ) → Buffer-- Returns an instance of the Buffer class. Create an instance of the Buffer class.  "},{"title":"Serialize​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#Serialize","content":"&lt;/&gt; Buffer:Serialize( data: {any}-- The data you want to serialize. ) → buffer This function takes an array of data and serializes it according to the supplied template.  "},{"title":"Deserialize​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#Deserialize","content":"&lt;/&gt; Buffer:Deserialize() → {any} This function outputs a deserialized table corresponding to the contents of the current buffer.  "},{"title":"Write​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#Write","content":"&lt;/&gt; Buffer:Write( memorySize: number,-- The amount of memory (bytes) being written. dataType: string,-- The data type being inscribed. value: number-- The value being inscribed. ) → Buffer This function is utilized internally. It is used to write a specific data type into a buffer, and increment the pointer accordingly.  "},{"title":"Read​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#Read","content":"&lt;/&gt; Buffer:Read( memorySize: number,-- The amount of memory being read. dataType: string-- The data type being read. ) → any This function is utilized internally. It is used to read a specific data type from the buffer, and increment the pointer accordingly.  "},{"title":"IncrementPointer​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#IncrementPointer","content":"&lt;/&gt; Buffer:IncrementPointer( amount: number-- How much to increment the pointer by. ) → Buffer This function is used internally. It is used to increment the pointer.  "},{"title":"SetTemplate​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#SetTemplate","content":"&lt;/&gt; Buffer:SetTemplate( template: {string}-- The new template. ) → Buffer This function allows you to specify the serialization / deserialization template.  "},{"title":"MakeNewBuffer​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#MakeNewBuffer","content":"&lt;/&gt; Buffer:MakeNewBuffer() → Buffer This function creates a new buffer with size relative to the current template.  "},{"title":"ImportBuffer​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#ImportBuffer","content":"&lt;/&gt; Buffer:ImportBuffer( buffer: buffer-- The buffer being imported. ) → Buffer This function imports an external buffer, and begins using it.  "},{"title":"Destroy​","type":1,"pageTitle":"Buffer","url":"/Commons/api/Buffer#Destroy","content":"&lt;/&gt; Buffer:Destroy() → nil This function cleans up the Buffer instance. "},{"title":"BufferInscriber","type":0,"sectionRef":"#","url":"/Commons/api/BufferInscriber","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#functions","content":" "},{"title":"new​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#new","content":"&lt;/&gt; BufferInscriber.new( instance: buffer?-- The buffer to initialize the class with. ) → BufferInscriber-- Returns an instance of the BufferInscriber class. Create an instance of the BufferInscriber class. info The BufferInscriber class is much more low-level than the Buffer class. Using this class requires significantly more effort, as it does not handle everything that the Buffer class normally handles.  "},{"title":"IncrementPointer​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#IncrementPointer","content":"&lt;/&gt; BufferInscriber:IncrementPointer( amount: number-- How much to increment the pointer by. ) → BufferInscriber This function is used to increment the pointer.  "},{"title":"SetPointer​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#SetPointer","content":"&lt;/&gt; BufferInscriber:SetPointer( amount: number-- What to set the pointer to. ) → BufferInscriber This function is used to set the pointer.  "},{"title":"Write​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#Write","content":"&lt;/&gt; BufferInscriber:Write( memorySize: number,-- The amount of memory (bytes) being written. dataType: string,-- The data type being inscribed. value: number-- The value being inscribed. ) → BufferInscriber This function is utilized internally. It is used to write a specific data type into a buffer, and increment the pointer accordingly.  "},{"title":"Read​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#Read","content":"&lt;/&gt; BufferInscriber:Read( memorySize: number,-- The amount of memory being read. dataType: string-- The data type being read. ) → any This function is utilized internally. It is used to read a specific data type from the buffer, and increment the pointer accordingly.  "},{"title":"ReadType​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#ReadType","content":"&lt;/&gt; BufferInscriber:ReadType( dataType: string,-- What DataType to read. offset: number?-- A starting pointer. If none is supplied, it will use the current pointer. ) → any This function is used to read a specific data type from the buffer.  "},{"title":"WriteType​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#WriteType","content":"&lt;/&gt; BufferInscriber:WriteType( dataType: string,-- What DataType to write. data: any-- The data to write into the buffer. ) → BufferInscriber This function is used to write a specific data type into the buffer.  "},{"title":"SetBuffer​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#SetBuffer","content":"&lt;/&gt; BufferInscriber:SetBuffer( buffer: buffer-- The buffer being imported. ) → BufferInscriber This function imports an external buffer, and begins using it.  "},{"title":"Destroy​","type":1,"pageTitle":"BufferInscriber","url":"/Commons/api/BufferInscriber#Destroy","content":"&lt;/&gt; BufferInscriber:Destroy() → nil This function cleans up the BufferInscriber instance. "},{"title":"TrackedCleaner","type":0,"sectionRef":"#","url":"/Commons/api/TrackedCleaner","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"TrackedCleaner","url":"/Commons/api/TrackedCleaner#functions","content":" "},{"title":"new​","type":1,"pageTitle":"TrackedCleaner","url":"/Commons/api/TrackedCleaner#new","content":"&lt;/&gt; TrackedCleaner.new() → TrackedCleaner Creates a new TrackedCleaner object.  "},{"title":"Add​","type":1,"pageTitle":"TrackedCleaner","url":"/Commons/api/TrackedCleaner#Add","content":"&lt;/&gt; TrackedCleaner:Add( item: any-- The item to add to the tracker. ) → TrackedCleaner Add an item to the tracker. local TrackedCleaner = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;Commons&quot;)).Cleaner.TrackedCleaner local MyCleaner = TrackedCleaner.new() MyCleaner:Add(workspace.MyPart) local MyTable = { workspace.MyOtherPart } MyCleaner:Add(MyTable)   "},{"title":"Remove​","type":1,"pageTitle":"TrackedCleaner","url":"/Commons/api/TrackedCleaner#Remove","content":"&lt;/&gt; TrackedCleaner:Remove( item: any-- The item to remove from the tracker. ) → TrackedCleaner Remove an item from the tracker. local TrackedCleaner = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;Commons&quot;)).Cleaner.TrackedCleaner local MyCleaner = TrackedCleaner.new() MyCleaner:Add(workspace.MyPart) MyCleaner:Remove(workspace.MyPart)   "},{"title":"Destroy​","type":1,"pageTitle":"TrackedCleaner","url":"/Commons/api/TrackedCleaner#Destroy","content":"&lt;/&gt; TrackedCleaner:Destroy() → () Destroy the tracker, and cleanup everything inside it. local TrackedCleaner = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;Commons&quot;)).Cleaner.TrackedCleaner local MyCleaner = TrackedCleaner.new() MyCleaner:Add(workspace.MyPart) MyCleaner:Destroy() -- workspace.MyPart is destroyed, as it is being tracked by the cleaner.  "},{"title":"Cleaner","type":0,"sectionRef":"#","url":"/Commons/api/Cleaner","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Cleaner","url":"/Commons/api/Cleaner#functions","content":" "},{"title":"Cleanup​","type":1,"pageTitle":"Cleaner","url":"/Commons/api/Cleaner#Cleanup","content":"&lt;/&gt; Cleaner.Cleanup( item: any,-- The item to cleanup itemType: string?-- The item's type (impacts the cleanup function used) ) → () This function can be used to cleanup the passed item argument. local Cleaner = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;Commons&quot;)).Cleaner Cleaner.Cleanup(workspace.MyPart)   "},{"title":"CleanupTable​","type":1,"pageTitle":"Cleaner","url":"/Commons/api/Cleaner#CleanupTable","content":"&lt;/&gt; Cleaner.CleanupTable( table: {[any]:any}-- The table to cleanup ) → () This function goes through a table, and deep cleans it (cleans up all values and nested tables). local Cleaner = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;Commons&quot;)).Cleaner.Cleaner local MyTable = { workspace.MyPart; { workspace.MyOtherPart; }; } Cleaner.CleanupTable(MyTable) -- Will destroy Workspace.MyPart, and workspace.MyOther part, as well as clear up the table's metatables and contents  "},{"title":"NettyClient","type":0,"sectionRef":"#","url":"/Commons/api/NettyClient","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"NettyClient","url":"/Commons/api/NettyClient#functions","content":" "},{"title":"Start​","type":1,"pageTitle":"NettyClient","url":"/Commons/api/NettyClient#Start","content":"&lt;/&gt; NettyClient.Start() → () This function starts the network inbound and outbound handler. Additionally, once NettyClient is started, you can begin to send and receive data to and from the server.  "},{"title":"RegisterEvent​","type":1,"pageTitle":"NettyClient","url":"/Commons/api/NettyClient#RegisterEvent","content":"&lt;/&gt; NettyClient.RegisterEvent( id: any,-- The event id to bind to. callback: (...any) → nil-- The callback function to run when this event is triggered. ) → () This function registers an event locally. This is used when the server wants to send data to the client. Events can only have one callback. info Events also need to be registered on the server, even if they have no callback. Since Netty uses an identity based system, the client and server need to share event ids.  "},{"title":"SpawnEvent​","type":1,"pageTitle":"NettyClient","url":"/Commons/api/NettyClient#SpawnEvent","content":"&lt;/&gt; NettyClient.SpawnEvent( eventType: any,-- The event id to trigger. ...: any-- The arguments to pass to the event. ) → () This function spawns an event in the current thread. note This function is mainly used internally, so it doesn't offer much configuration / outside influence.  "},{"title":"FireServer​","type":1,"pageTitle":"NettyClient","url":"/Commons/api/NettyClient#FireServer","content":"&lt;/&gt; NettyClient.FireServer( eventId: any,-- The event id to trigger. ...: any-- The arguments to pass to the server. ) → () This function fires a reliable remote event with proper data serialization to the server. note Events aren't fire instantly. They're queued into an outbound pool, and a maximum of 255 events of each type(unreliable, reliable) are fired to the server at once per Heartbeat (RunService.Heartbeat). This function supports all data types, even if they aren't able to be serialized into buffers. Example: local NettyClient = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;Commons&quot;)).Netty.Client NettyClient.Start() NettyClient.FireServer(&quot;my event&quot;, 123, CFrame.identity,&quot;abc&quot;, workspace.MyPart) -- All of these arguments will be passed to the server.   "},{"title":"FireServerUnreliable​","type":1,"pageTitle":"NettyClient","url":"/Commons/api/NettyClient#FireServerUnreliable","content":"&lt;/&gt; NettyClient.FireServerUnreliable( eventId: any,-- The event id to trigger. ...: any-- The arguments to pass to the server. ) → () This function fires an unreliable remote event with proper data serialization to the server. note Events aren't fire instantly. They're queued into an outbound pool, and a maximum of 255 events of each type(unreliable, reliable) are fired to the server at once per Heartbeat (RunService.Heartbeat). This function supports all data types, even if they aren't able to be serialized into buffers. Example: local NettyClient = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;Commons&quot;)).Netty.Client NettyClient.Start() NettyClient.FireServerUnreliable(&quot;my event&quot;, 123, CFrame.identity,&quot;abc&quot;, workspace.MyPart) -- All of these arguments will be passed to the server.  "},{"title":"Thread","type":0,"sectionRef":"#","url":"/Commons/api/Thread","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Thread","url":"/Commons/api/Thread#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Thread","url":"/Commons/api/Thread#new","content":"&lt;/&gt; Thread.new( options: ThreadOptions-- The initial configuration for the class. ) → Thread "},{"title":"Types","type":1,"pageTitle":"Thread","url":"/Commons/api/Thread##","content":""},{"title":"​","type":1,"pageTitle":"Thread","url":"/Commons/api/Thread#ThreadOptions","content":"interface ThreadOptions { Interval: number?-- The interval to run operations at (default 0.01). OperationLimit: number?-- The number of operations to run each step (default 5). }  This function creates a new instance of the Thread class.  "},{"title":"Spawn​","type":1,"pageTitle":"Thread","url":"/Commons/api/Thread#Spawn","content":"&lt;/&gt; Thread:Spawn() → Thread This function spawns a thread to process operations. There can only be one thread running at once.  "},{"title":"Stop​","type":1,"pageTitle":"Thread","url":"/Commons/api/Thread#Stop","content":"&lt;/&gt; Thread:Stop() → Thread This function stops the current thread.  "},{"title":"ThreadActive​","type":1,"pageTitle":"Thread","url":"/Commons/api/Thread#ThreadActive","content":"&lt;/&gt; Thread:ThreadActive() → boolean This function returns true if the Thread currently has a working thread.  "},{"title":"GetCurrentId​","type":1,"pageTitle":"Thread","url":"/Commons/api/Thread#GetCurrentId","content":"&lt;/&gt; Thread:GetCurrentId() → string? This function returns the current thread id if there is a working thread.  "},{"title":"QueueOperation​","type":1,"pageTitle":"Thread","url":"/Commons/api/Thread#QueueOperation","content":"&lt;/&gt; Thread:QueueOperation(operation: ( number?, Thread? ) → nil) → Thread This function queues a function to be executed by the Thread.  "},{"title":"AdjustInterval​","type":1,"pageTitle":"Thread","url":"/Commons/api/Thread#AdjustInterval","content":"&lt;/&gt; Thread:AdjustInterval(interval: number) → Thread This function adjusts the interval at which the Thread executes operations at.  "},{"title":"AdjustOperationLimit​","type":1,"pageTitle":"Thread","url":"/Commons/api/Thread#AdjustOperationLimit","content":"&lt;/&gt; Thread:AdjustOperationLimit(limit: number) → Thread This function adjusts the operation limit for each frame.  "},{"title":"Destroy​","type":1,"pageTitle":"Thread","url":"/Commons/api/Thread#Destroy","content":"&lt;/&gt; Thread:Destroy() → () This function destroys the Thread instance. "},{"title":"Observer","type":0,"sectionRef":"#","url":"/Commons/api/Observer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Observer","url":"/Commons/api/Observer#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Observer","url":"/Commons/api/Observer#new","content":"&lt;/&gt; Observer.new() → {[any]:any}-- Returns a table with observational capabilities. This function allows you to create a new observational table. note The returned data type is actually a userdata. In order to performantly emit table read / write events, we need to use this setup. local Observer = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;Commons&quot;)).Observer local MyTable = Observer.new() MyTable.onRead(function(key) print(&quot;Someone read &quot; .. key .. &quot; from MyTable!&quot;) end) MyTable.abc = 123 print(MyTable.abc) -- Triggers the pre-defined onRead function   "},{"title":"cleanup​","type":1,"pageTitle":"Observer","url":"/Commons/api/Observer#cleanup","content":"&lt;/&gt; Observer.cleanup( proxy: {[any]:any}-- The observational table you want to clean up. ) → () This function cleans up an observational table. local Observer = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;Commons&quot;)).Observer local MyTable = Observer.new() MyTable.onRead(function(key) print(&quot;Someone read &quot; .. key .. &quot; from MyTable!&quot;) end) MyTable.abc = 123 print(MyTable.abc) -- Triggers the pre-defined onRead function Observer.cleanup(MyTable)  "}]